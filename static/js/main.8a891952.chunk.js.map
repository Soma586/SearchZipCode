{"version":3,"sources":["Header.js","cityInfo.js","form.js","Fetcher.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","CityInfo","props","className","State","Coordinates","population","wages","Form","id","onChange","search","Fetcher","state","cities","input","document","getElementById","value","length","fetch","then","response","json","data","console","log","_this","setState","click","this","City","results","map","city","cityInfo","Location","EstimatedPopulation","TotalWages","src_form","Component","App","src_Header","src_Fetcher","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yJAceA,SAXH,WACR,OACIC,EAAAC,EAAAC,cAAA,iECeOC,MAjBf,SAAkBC,GAEhB,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAY,QACbL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,qBAAaE,EAAME,OACnBN,EAAAC,EAAAC,cAAA,wBAAgBE,EAAMG,YAAtB,MACAP,EAAAC,EAAAC,cAAA,qCAA6BE,EAAMI,YACnCR,EAAAC,EAAAC,cAAA,2BAAmBE,EAAMK,UCUtBC,EAlBJ,SAACN,GACR,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOS,GAAK,MAAMC,SAAYR,EAAMS,YCoDrCC,6MApDPC,MAAQ,CACJC,OAAQ,MAIhBH,OAAS,WACL,IAAMI,EAAQC,SAASC,eAAe,OAAOC,MACzB,IAAjBH,EAAMI,QACLC,MAAM,wCAA0CL,GAC/CM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,SAEZC,EAAKC,SAAS,CACVd,OAASU,SAUzBK,MAAQ,qFAIJJ,QAAQC,IAAI,oBAAsBI,KAAKjB,MAAMC,OAAOiB,MAErD,IAAMC,EAAUF,KAAKjB,MAAMC,OAAOmB,IAAI,SAAAC,GAAI,OAAIpC,EAAAC,EAAAC,cAACmC,EAAD,CAAU/B,MAAS8B,EAAK9B,MAAOC,YAAe6B,EAAKE,SAAU9B,WAAc4B,EAAKG,oBAAqB9B,MAAS2B,EAAKI,eAQhK,OAFDb,QAAQC,IAAIM,GAGPlC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACuC,EAAD,CAAM5B,OAAUmB,KAAKnB,SAGpBqB,UA/CKQ,aC6BPC,EA3BL,WACR,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0C,EAAD,MACF5C,EAAAC,EAAAC,cAAC2C,EAAD,QCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASnC,SAASC,eAAe,SD2H3C,kBAAmBmC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.8a891952.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nlet Header =() =>{\r\n    return(\r\n        <header>Zip Search</header>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n//it seems like when you have a class/ component then you need to call the render method\r\nfunction CityInfo(props) {\r\n\r\n  return(\r\n    <div className = \"card\">\r\n        <ul>\r\n            <li>State : {props.State}</li>\r\n            <li>Location : {props.Coordinates}, </li>\r\n            <li>Population estimation : {props.population}</li>\r\n            <li>Total Wages : {props.wages}</li>\r\n        </ul>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default CityInfo;\r\n","import React from 'react'\r\n\r\n\r\nlet Form = (props) =>{\r\n    return(\r\n        <div>\r\n            <form>\r\n                <label>Zip Code:</label>\r\n                <input id = \"zip\" onChange = {props.search}/>\r\n                \r\n\r\n\r\n            </form>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Form;","import React, {Component} from 'react'\r\nimport CityInfo from './cityInfo'\r\nimport Form from './form'\r\nimport zipData from './zipData'\r\n\r\n\r\nclass Fetcher extends Component{\r\n    \r\n        state = {\r\n            cities :[]\r\n        }\r\n    \r\n\r\n    search = () =>{\r\n        const input = document.getElementById(\"zip\").value\r\n        if(input.length === 5){\r\n            fetch(\"http://ctp-zip-api.herokuapp.com/zip/\" + input)\r\n            .then(response => response.json())\r\n            .then(data =>{\r\n                console.log(data)\r\n                console.log(\"hello\")\r\n               \r\n                this.setState({\r\n                    cities : data\r\n                    \r\n\r\n                })\r\n                \r\n            })\r\n        } \r\n\r\n    }\r\n\r\n    click = () =>{\r\n        \r\n    }\r\n    render(){\r\n        console.log(\"city information \" + this.state.cities.City)\r\n       \r\n       const results = this.state.cities.map(city => <CityInfo State = {city.State} Coordinates = {city.Location} population = {city.EstimatedPopulation} wages = {city.TotalWages}/>)\r\n       //<Form search = {this.search}/>\r\n       //const results = zipData.map( i => {\r\n         // return( <CityInfo state = {i.statel}/>)\r\n      // })\r\n\r\n       console.log(results)\r\n\r\n        return(\r\n            <div>\r\n                \r\n                <Form search = {this.search}/>\r\n                \r\n                \r\n                {results}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fetcher;","import React from 'react';\n//import CityInfo from './cityInfo';\nimport Header from './Header'\nimport Info from './Fetcher'\n\n//import axios from 'axios';\n\n\nlet App = () =>{\n  return (\n    <div>\n      <Header/>\n    <Info/>\n\n\n    </div>\n    \n  )\n\n}\n\n\n\n \n  \n\n\n\n\n//var object = \"\";\n\n//console.log(object);\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}